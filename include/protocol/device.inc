
struct EFI_IO_ACCESS
	Read	PTR ? ; EFI_STATUS (*this,EFI_IO_WIDTH,UINT64,UINTN,*)
	Write	PTR ? ; EFI_STATUS (*this,EFI_IO_WIDTH,UINT64,UINTN,*)
ends

iterate I,IO_UINT8,IO_UINT16,IO_UINT32,IO_UINT64,MMIO_COPY_UINT8,MMIO_COPY_UINT16,MMIO_COPY_UINT32,MMIO_COPY_UINT64
	I := % - 1 ; EFI_IO_WIDTH
end iterate

define EFI_DEVICE_IO_PROTOCOL_GUID {0xAF6AC311,0x84C3,0x11D2,{0x8E,0x3C,0x00,0xA0,0xC9,0x69,0x72,0x3B}}
struct EFI_DEVICE_IO_PROTOCOL
	Mem	EFI_IO_ACCESS
	Io	EFI_IO_ACCESS
	Pci	EFI_IO_ACCESS

	Map		PTR ? ; EFI_STATUS (*this,EFI_IO_OPERATION_TYPE,*EFI_PHYSICAL_ADDRESS,*UINTN,*EFI_PHYSICAL_ADDRESS,**)
	PciDevicePath	PTR ? ; EFI_STATUS (*this,UINT64,**EFI_DEVICE_PATH_PROTOCOL)
	Unmap		PTR ? ; EFI_STATUS (*this,*)
	AllocateBuffer	PTR ? ; EFI_STATUS (*this,EFI_ALLOCATE_TYPE,EFI_MEMORY_TYPE,UINTN,*EFI_PHYSICAL_ADDRESS)
	Flush		PTR ? ; EFI_STATUS (*this)
	FreeBuffer	PTR ? ; EFI_STATUS (*this,UINTN,EFI_PHYSICAL_ADDRESS)
ends

iterate I,Read,Write,CommonBuffer
	EfiBusMaster#I := % - 1 ; EFI_IO_OPERATION_TYPE
end iterate



define EFI_DEVICE_PATH_PROTOCOL_GUID {0x09576E91,0x6D3F,0x11D2,{0x8E,0x39,0x00,0xA0,0xC9,0x69,0x72,0x3B}}
struct EFI_DEVICE_PATH_PROTOCOL
	Type	db ?
	SubType	db ?
	Length	db ?,?
ends


iterate I,HARDWARE,ACPI,MESSAGING,MEDIA,BBS
	I#_DEVICE_PATH := %
end iterate

HW_PCI_DP := 0x01 ; PCI Device Path SubType
struct PCI_DEVICE_PATH
	Header EFI_DEVICE_PATH_PROTOCOL
	Function	db ?
	Device		db ?
ends

HW_PCCARD_DP := 0x02 ; PCCARD Device Path SubType
struct PCCARD_DEVICE_PATH
	Header EFI_DEVICE_PATH_PROTOCOL
	FunctionNumber	db ? ; 0+
ends 

; note: this catch-all union restricts STRUCT naming to prevent conflicts
; probably not the best way.
;	union EFI_DEV_PATH
define EFI_DEV_PATH_PTR PTR

END_DEVICE_PATH_TYPE		:= 0x7F
END_ENTIRE_DEVICE_PATH_SUBTYPE	:= 0xFF
END_INSTANCE_DEVICE_PATH_SUBTYPE:= 0x01









define EFI_DEVICE_PATH_UTILITIES_PROTOCOL_GUID { 0x379BE4E,0xD706,0x437D, { 0xB0,0x37,0xED,0xB8,0x2F,0xB7,0x72,0xA4 } }
struct EFI_DEVICE_PATH_UTILITIES_PROTOCOL
	GetDevicePathSize		PTR ? ; UINTN (?*EFI_DEVICE_PATH_PROTOCOL)
	DuplicateDevicePath		PTR ? ;*EFI_DEVICE_PATH_PROTOCOL (?*EFI_DEVICE_PATH_PROTOCOL)
	AppendDevicePath		PTR ? ;*EFI_DEVICE_PATH_PROTOCOL (?*EFI_DEVICE_PATH_PROTOCOL,?*EFI_DEVICE_PATH_PROTOCOL)
	AppendDeviceNode		PTR ? ;*EFI_DEVICE_PATH_PROTOCOL (?*EFI_DEVICE_PATH_PROTOCOL,?*EFI_DEVICE_PATH_PROTOCOL)
	AppendDevicePathInstance	PTR ? ;*EFI_DEVICE_PATH_PROTOCOL (?*EFI_DEVICE_PATH_PROTOCOL,?*EFI_DEVICE_PATH_PROTOCOL)
	GetNextDevicePathInstance	PTR ? ;*EFI_DEVICE_PATH_PROTOCOL (?**EFI_DEVICE_PATH_PROTOCOL,?*INTN)
	IsDevicePathMultiInstance	PTR ? ; BOOLEAN (?*EFI_DEVICE_PATH_PROTOCOL)
	CreateDeviceNode		PTR ? ;*EFI_DEVICE_PATH_PROTOCOL (INT8,INT8,INT16)
ends

define EFI_DEVICE_PATH_TO_TEXT_PROTOCOL_GUID { 0x8B843E20,0x8132,0x4852, { 0x90,0xCC,0x55,0x1A,0x4E,0x4A,0x7F,0x1C } }
struct EFI_DEVICE_PATH_TO_TEXT_PROTOCOL
	ConvertDeviceNodeToText	PTR ? ;*CHAR16 (*EFI_DEVICE_PATH_PROTOCOL,BOOLEAN,BOOLEAN)
	ConvertDevicePathToText	PTR ? ;*CHAR16 (*EFI_DEVICE_PATH_PROTOCOL,BOOLEAN,BOOLEAN)
ends

define EFI_DEVICE_PATH_FROM_TEXT_PROTOCOL_GUID { 0x5C99A21,0xC70F,0x4AD2, { 0x8A,0x5F,0x35,0xDF,0x33,0x43,0xF5,0x1E } }
struct _EFI_DEVICE_PATH_FROM_TEXT_PROTOCOL {
	ConvertTextToDevicNode	PTR ? ;*EFI_DEVICE_PATH_PROTOCOL (*CHAR16)
	ConvertTextToDevicPath	PTR ? ;*EFI_DEVICE_PATH_PROTOCOL (*CHAR16)
ends

