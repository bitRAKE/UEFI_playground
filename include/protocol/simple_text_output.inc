?GUID equ EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL_GUID \
{0x387477C2,0x69C7,0x11D2,{0x8E,0x39,0x00,0xA0,0xC9,0x69,0x72,0x3B}}
struct EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL
	Reset                PTR ? ; EFI_STATUS (*this,BOOLEAN)
	OutputString         PTR ? ; EFI_STATUS (*this,*CHAR16)
	TestString           PTR ? ; EFI_STATUS (*this,*CHAR16)
	QueryMode            PTR ? ; EFI_STATUS (*this,UINTN,*UINTN,*UINTN)
	SetMode              PTR ? ; EFI_STATUS (*this,UINTN)
	SetAttribute         PTR ? ; EFI_STATUS (*this,UINTN)
	ClearScreen          PTR ? ; EFI_STATUS (*this)
	SetCursorPosition    PTR ? ; EFI_STATUS (*this,UINTN,UINTN)
	EnableCursor         PTR ? ; EFI_STATUS (*this,BOOLEAN)
	Mode                 PTR ? ;*SIMPLE_TEXT_OUTPUT_MODE
ends

;	UNICODE DRAWING CHARACTERS:
BOXDRAW_HORIZONTAL		:= 0x2500
BOXDRAW_VERTICAL		:= 0x2502
BOXDRAW_DOWN_RIGHT		:= 0x250C
BOXDRAW_DOWN_LEFT		:= 0x2510
BOXDRAW_UP_RIGHT		:= 0x2514
BOXDRAW_UP_LEFT			:= 0x2518
BOXDRAW_VERTICAL_RIGHT		:= 0x251C
BOXDRAW_VERTICAL_LEFT		:= 0x2524
BOXDRAW_DOWN_HORIZONTAL		:= 0x252C
BOXDRAW_UP_HORIZONTAL		:= 0x2534
BOXDRAW_VERTICAL_HORIZONTAL	:= 0x253C
BOXDRAW_DOUBLE_HORIZONTAL	:= 0x2550
BOXDRAW_DOUBLE_VERTICAL		:= 0x2551
BOXDRAW_DOWN_RIGHT_DOUBLE	:= 0x2552
BOXDRAW_DOWN_DOUBLE_RIGHT	:= 0x2553
BOXDRAW_DOUBLE_DOWN_RIGHT	:= 0x2554
BOXDRAW_DOWN_LEFT_DOUBLE	:= 0x2555
BOXDRAW_DOWN_DOUBLE_LEFT	:= 0x2556
BOXDRAW_DOUBLE_DOWN_LEFT	:= 0x2557
BOXDRAW_UP_RIGHT_DOUBLE		:= 0x2558
BOXDRAW_UP_DOUBLE_RIGHT		:= 0x2559
BOXDRAW_DOUBLE_UP_RIGHT		:= 0x255A
BOXDRAW_UP_LEFT_DOUBLE		:= 0x255B
BOXDRAW_UP_DOUBLE_LEFT		:= 0x255C
BOXDRAW_DOUBLE_UP_LEFT		:= 0x255D
BOXDRAW_VERTICAL_RIGHT_DOUBLE	:= 0x255E
BOXDRAW_VERTICAL_DOUBLE_RIGHT	:= 0x255F
BOXDRAW_DOUBLE_VERTICAL_RIGHT	:= 0x2560
BOXDRAW_VERTICAL_LEFT_DOUBLE	:= 0x2561
BOXDRAW_VERTICAL_DOUBLE_LEFT	:= 0x2562
BOXDRAW_DOUBLE_VERTICAL_LEFT	:= 0x2563
BOXDRAW_DOWN_HORIZONTAL_DOUBLE	:= 0x2564
BOXDRAW_DOWN_DOUBLE_HORIZONTAL	:= 0x2565
BOXDRAW_DOUBLE_DOWN_HORIZONTAL	:= 0x2566
BOXDRAW_UP_HORIZONTAL_DOUBLE	:= 0x2567
BOXDRAW_UP_DOUBLE_HORIZONTAL	:= 0x2568
BOXDRAW_DOUBLE_UP_HORIZONTAL	:= 0x2569
BOXDRAW_VERTICAL_HORIZONTAL_DOUB:= 0x256A
BOXDRAW_VERTICAL_DOUBLE_HORIZONT:= 0x256B
BOXDRAW_DOUBLE_VERTICAL_HORIZONT:= 0x256C
;	EFI Required Block Elements Code Chart:
BLOCKELEMENT_FULL_BLOCK		:= 0x2588
BLOCKELEMENT_LIGHT_SHADE	:= 0x2591
;	EFI Required Geometric Shapes Code Chart:
GEOMETRICSHAPE_UP_TRIANGLE	:= 0x25B2
GEOMETRICSHAPE_RIGHT_TRIANGLE	:= 0x25BA
GEOMETRICSHAPE_DOWN_TRIANGLE	:= 0x25BC
GEOMETRICSHAPE_LEFT_TRIANGLE	:= 0x25C4
;	EFI Required Arrow shapes:
ARROW_LEFT			:= 0x2190
ARROW_UP			:= 0x2191
ARROW_RIGHT			:= 0x2192
ARROW_DOWN			:= 0x2193


;	Attributes:
EFI_BLACK		:= 0x00
EFI_BLUE		:= 0x01
EFI_GREEN		:= 0x02
EFI_CYAN		:= 0x03
EFI_RED			:= 0x04
EFI_MAGENTA		:= 0x05
EFI_BROWN		:= 0x06
EFI_LIGHTGRAY		:= 0x07

EFI_BRIGHT		:= 0x08
EFI_LIGHTBLUE		:= 0x09
EFI_LIGHTGREEN		:= 0x0A
EFI_LIGHTCYAN		:= 0x0B
EFI_LIGHTRED		:= 0x0C
EFI_LIGHTMAGENTA	:= 0x0D
EFI_YELLOW		:= 0x0E
EFI_WHITE		:= 0x0F

EFI_BACKGROUND_BLACK	:= 0x00
EFI_BACKGROUND_BLUE	:= 0x10
EFI_BACKGROUND_GREEN	:= 0x20
EFI_BACKGROUND_CYAN	:= 0x30
EFI_BACKGROUND_RED	:= 0x40
EFI_BACKGROUND_MAGENTA	:= 0x50
EFI_BACKGROUND_BROWN	:= 0x60
EFI_BACKGROUND_LIGHTGRAY:= 0x70

EFI_WIDE_ATTRIBUTE	:= 0x80 ; use wide glyph database

struct EFI_SIMPLE_TEXT_OUTPUT_MODE
	MaxMode		dd ? ;
	; current settings:
	Mode		dd ? ;
	Attribute	dd ? ;
	CursorColumn	dd ? ;
	CursorRow	dd ? ;
	CursorVisible	dd ? ;
ends



if used ConOut__PrintAttrAt
; TODO: select 32/64 code based on mode
ConOut__PrintAttrAt:
; RBP : EFI_SYSTEM_TABLE pointer
	virtual at RSP
		rq 4 ; shadow space for Win64abi

	; local variable space:
	;	(nothing)

	; align stack with extra space if needed:
		rb ($10 - ((.PARAM + 8 + $ - $$) and $F)) and $F

	; culmination of stack adjustment needed:
		.FRAME := $ - $$

		.RET		dq ?	; CALL instruction put this on stack

	; parameters passed on stack:
		.str_usc2	dq ?	;*CHAR16
		.attribute	dq ?	; UINTN (only least byte used)
		.column		dq ?	; UINTN
		.row		dq ?	; UINTN

	; passed parameter bytes to clear off stack
		.PARAM := $ - .str_usc2
	end virtual
	sub rsp,.FRAME

	mov rcx,[rbp + EFI_SYSTEM_TABLE.ConOut]
	mov edx,dword [.column]
	mov r8d,dword [.row]
	call [rcx + EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL.SetCursorPosition]

	mov rcx,[rbp + EFI_SYSTEM_TABLE.ConOut]
	; optimized to allow immediate byte pushes when using EFI_WIDE_ATTRIBUTE
	movzx edx,byte [.attribute]
	call [rcx + EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL.SetAttribute]

	mov rcx,[rbp + EFI_SYSTEM_TABLE.ConOut]
	mov rdx,[.str_usc2]
	call [rcx + EFI_SIMPLE_TEXT_OUTPUT_PROTOCOL.OutputString]

	add rsp,.FRAME
	retn .PARAM
end if
