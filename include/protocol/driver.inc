?GUID equ EFI_DRIVER_BINDING_PROTOCOL_GUID \
{0x18A031AB,0xB443,0x4D1A,{0xA5,0xC0,0x0C,0x09,0x26,0x1E,0x9F,0x71}}
struct EFI_DRIVER_BINDING_PROTOCOL
	Supported	PTR ? ; EFI_STATUS (*this,EFI_HANDLE,?*EFI_DEVICE_PATH_PROTOCOL)
	Start		PTR ? ; EFI_STATUS (*this,EFI_HANDLE,?*EFI_DEVICE_PATH_PROTOCOL)
	Stop		PTR ? ; EFI_STATUS (*this,EFI_HANDLE,UINTN,?*EFI_HANDLE)
	Version			dd ?		; OEM: [-16,15] ; IHV: [16,-17]
	ImageHandle		EFI_HANDLE	;
	DriverBindingHandle	EFI_HANDLE	;
ends



?GUID equ EFI_DRIVER_CONFIGURATION_PROTOCOL_GUID \
{0x107A772B,0xD5E1,0x11D4,{0x9A,0x46,0x00,0x90,0x27,0x3F,0xC1,0x4D}}
struct EFI_DRIVER_CONFIGURATION_PROTOCOL
	SetOptions		PTR ? ; EFI_STATUS (*this,EFI_HANDLE,?EFI_HANDLE,*CHAR8,*EFI_DRIVER_CONFIGURATION_ACTION_REQUIRED)
	OptionsValid		PTR ? ; EFI_STATUS (*this,EFI_HANDLE,?EFI_HANDLE)
	ForceDefaults		PTR ? ; EFI_STATUS (*this,EFI_HANDLE,?EFI_HANDLE,UINT32,*EFI_DRIVER_CONFIGURATION_ACTION_REQUIRED)
	SupportedLanguages	PTR ? ;*CHAR8
ends

iterate I,None,StopController,RestartController,RestartPlatform
	EfiDriverConfigurationAction#I := % - 1 ; EFI_DRIVER_CONFIGURATION_ACTION_REQUIRED
end iterate
iterate I,SAFE_DEFAULTS,MANUFACTURING_DEFAULTS,CUSTOM_DEFAULTS,PERORMANCE_DEFAULTS
	EFI_DRIVER_CONFIGURATION_#I := % - 1 ; UINT32
end iterate

?GUID equ EFI_DRIVER_CONFIGURATION2_PROTOCOL_GUID \
{0xBFD7DC1D,0x24F1,0x40D9,{0x82,0xE7,0x2E,0x09,0xBB,0x6B,0x4E,0xBE}}
struct EFI_DRIVER_CONFIGURATION_PROTOCOL
	SetOptions		PTR ? ; EFI_STATUS (*this,EFI_HANDLE,?EFI_HANDLE,*CHAR8,*EFI_DRIVER_CONFIGURATION_ACTION_REQUIRED)
	OptionsValid		PTR ? ; EFI_STATUS (*this,EFI_HANDLE,?EFI_HANDLE)
	ForceDefaults		PTR ? ; EFI_STATUS (*this,EFI_HANDLE,?EFI_HANDLE,UINT32,*EFI_DRIVER_CONFIGURATION_ACTION_REQUIRED)
	SupportedLanguages	PTR ? ;*CHAR8
ends



?GUID equ EFI_DRIVER_DIAGNOSTICS_PROTOCOL_GUID \
{0x0784924F,0xE296,0x11D4,{0x9A,0x49,0x00,0x90,0x27,0x3F,0xC1,0x4D}}
struct EFI_DRIVER_DIAGNOSTICS_PROTOCOL
	RunDiagnostics		PTR ? ; EFI_STATUS (*this,EFI_HANDLE,?EFI_HANDLE,EFI_DRIVER_DIAGNOSTIC_TYPE,*CHAR8,**EFI_GUID,*INTN,**CHAR16)
	SupportedLanguages	PTR ? ;*CHAR8
ends

iterate I,EfiDriverDiagnosticTypeStandard,EfiDriverDiagnosticTypeExtended,EfiDriverDiagnosticTypeManufacturing,EfiDriverDiagnosticTypeCancel
	I := % - 1 ; EFI_DRIVER_DIAGNOSTIC_TYPE
end iterate

?GUID equ EFI_DRIVER_DIAGNOSTICS2_PROTOCOL_GUID \
{0x4D330321,0x025F,0x4AAC,{0x90,0xD8,0x5E,0xD9,0x00,0x17,0x3B,0x63}}
struct EFI_DRIVER_DIAGNOSTICS2_PROTOCOL
	RunDiagnostics		PTR ? ; EFI_STATUS (*this,EFI_HANDLE,?EFI_HANDLE,EFI_DRIVER_DIAGNOSTIC_TYPE,*CHAR8,**EFI_GUID,*INTN,**CHAR16)
	SupportedLanguages	PTR ? ;*CHAR8
ends



?GUID equ EFI_DRIVER_FAMILY_OVERRIDE_PROTOCOL_GUID \
{0xB1EE129E,0xDA36,0x4181,{0x91,0xF8,0x04,0xA4,0x92,0x37,0x66,0xA7}}
struct EFI_DRIVER_FAMILY_OVERRIDE_PROTOCOL
	GetVersion PTR ? ; UINT32 (*this)
ends

?GUID equ EFI_BUS_SPECIFIC_DRIVER_OVERRIDE_PROTOCOL_GUID \
{0x3BC1B285,0x8A15,0x4A82,{0xAA,0xBF,0x4D,0x7D,0x13,0xFB,0x32,0x65}}
struct EFI_BUS_SPECIFIC_DRIVER_OVERRIDE_PROTOCOL
	GetDriver	PTR ? ; EFI_STATUS (*this,*?EFI_HANDLE)
ends

?GUID equ EFI_PLATFORM_DRIVER_OVERRIDE_PROTOCOL_GUID \
{0x6B30C738,0xA391,0x11D4,{0x9A,0x3B,0x00,0x90,0x27,0x3F,0xC1,0x4D}}
struct EFI_PLATFORM_DRIVER_OVERRIDE_PROTOCOL
	GetDriver	PTR ? ; EFI_STATUS (*this,EFI_HANDLE,*?EFI_HANDLE)
	GetDriverPath	PTR ? ; EFI_STATUS (*this,EFI_HANDLE,*?*EFI_DEVICE_PATH_PROTOCOL)
	DriverLoaded	PTR ? ; EFI_STATUS (*this,EFI_HANDLE,*EFI_DEVICE_PATH_PROTOCOL,EFI_HANDLE)
ends



?GUID equ EFI_DRIVER_HEALTH_PROTOCOL_GUID \
{0x2A534210,0x9280,0x41D8,{0xAE,0x79,0xCA,0xDA,0x01,0xA2,0xB1,0x27}}
struct EFI_DRIVER_HEALTH_PROTOCOL
	GetHealthStatus	PTR ? ; EFI_STATUS (*this,?EFI_HANDLE,?EFI_HANDLE,*EFI_DRIVER_HEALTH_STATUS,?**EFI_DRIVER_HEALTH_HII_MESSAGE,?*EFI_HII_HANDLE)
	Repair		PTR ? ; EFI_STATUS (*this,EFI_HANDLE,?EFI_HANDLE,?EFI_DRIVER_HEALTH_REPAIR_NOTIFY)
ends

iterate I,Healthy,RepairRequired,ConfigurationRequired,Failed,ReconnectRequired,RebootRequired
	EfiDriverHealthStatus#I := % - 1 ; EFI_DRIVER_HEALTH_STATUS
end iterate

struct EFI_DRIVER_HEALTH_HII_MESSAGE
	HiiHandle	; EFI_HII_HANDLE
	StringId	; EFI_STRING_ID
	MessageCode	dq ?	; UINT64
ends

; EFI_DRIVER_HEALTH_REPAIR_NOTIFY (UINTN,UINTN)



?GUID equ EFI_DRIVER_SUPPORTED_EFI_VERSION_PROTOCOL_GUID \
{0x5C198761,0x16A8,0x4E69,{0x97,0x2C,0x89,0xD6,0x79,0x54,0xF8,0x1D}}
struct EFI_DRIVER_SUPPORTED_EFI_VERSION_PROTOCOL {
	Length		dd ? ; UINT32
	FirmwareVersion	dd ? ; UINT32
ends
